{"version":3,"sources":["webpack:///./src/pages/404.js"],"names":["pageStyles","color","padding","fontFamily","headingStyles","marginTop","marginBottom","maxWidth","paragraphStyles","NotFoundPage","style","role","aria-label","to"],"mappings":"2FAAA,mCAIMA,EAAa,CACjBC,MAAO,UACPC,QAAS,OACTC,WAAY,4CAERC,EAAgB,CACpBC,UAAW,EACXC,aAAc,GACdC,SAAU,KAGNC,EAAkB,CACtBF,aAAc,IAqCDG,UA1BM,WACnB,OACE,wBAAMC,MAAOV,GACX,0CACA,sBAAIU,MAAON,GAAX,kBACA,qBAAGM,MAAOF,GAAV,QACQ,IACN,wBAAMG,KAAK,MAAMC,aAAW,iBAA5B,MAEQ,IAJV,8CAME,2BAOI,KACJ,2BACA,gBAAC,IAAD,CAAMC,GAAG,KAAT,WAfF","file":"component---src-pages-404-js-976bcc76e979b9ea8fad.js","sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\n// styles\nconst pageStyles = {\n  color: \"#232129\",\n  padding: \"96px\",\n  fontFamily: \"-apple-system, Roboto, sans-serif, serif\",\n}\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\n\nconst paragraphStyles = {\n  marginBottom: 48,\n}\nconst codeStyles = {\n  color: \"#8A6534\",\n  padding: 4,\n  backgroundColor: \"#FFF4DB\",\n  fontSize: \"1.25rem\",\n  borderRadius: 4,\n}\n\n// markup\nconst NotFoundPage = () => {\n  return (\n    <main style={pageStyles}>\n      <title>Not found</title>\n      <h1 style={headingStyles}>Page not found</h1>\n      <p style={paragraphStyles}>\n        Sorry{\" \"}\n        <span role=\"img\" aria-label=\"Pensive emoji\">\n          ðŸ˜”\n        </span>{\" \"}\n        we couldnâ€™t find what you were looking for.\n        <br />\n        {process.env.NODE_ENV === \"development\" ? (\n          <>\n            <br />\n            Try creating a page in <code style={codeStyles}>src/pages/</code>.\n            <br />\n          </>\n        ) : null}\n        <br />\n        <Link to=\"/\">Go home</Link>.\n      </p>\n    </main>\n  )\n}\n\nexport default NotFoundPage\n\n//\n// function getBase64EncodedAudio(blob: any) {\n//   return new Promise<any>((resolve: any, reject: any) => {\n//     const reader = new FileReader()\n//     let base64data: any = null\n//     reader.readAsDataURL(blob)\n//     reader.onloadend = () => {\n//       base64data = reader.result\n//       resolve(base64data)\n//     }\n//     return base64data\n//   })\n// }\n//\n// const base64data: any = await getBase64EncodedAudio(blob)\n// const formattedBase64Data: any = base64data.split(',')[1]\n\n// let body: any = {\n//   config: {\n//     enableAutomaticPunctuation: true,\n//     encoding: 'LINEAR16',\n//     languageCode: 'en-US',\n//     model: 'command_and_search'\n//   },\n//   audio: {\n//     content: formattedBase64Data\n//   }\n// }\n\n// const res = fetch(\n//   `https://storage.googleapis.com/upload/storage/v1/b/siri-project/o?uploadType=media&name=test_name_1`,\n//   {\n//     method: 'POST',\n//     headers: {\n//       Authorization: `Bearer ${process.env.GATSBY_GOOGLE_API_AUTH_TOKEN}`,\n//       'Content-Type': 'audio/ogg; codecs=opus'\n//     },\n//     body: blob\n//   }\n// )\n\n// let speechResponse = null\n// await fetch(`https://speech.googleapis.com/v1p1beta1/speech:recognize`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//     Authorization: `Bearer ${process.env.GATSBY_GOOGLE_API_AUTH_TOKEN}`\n//   },\n//   body: JSON.stringify(body)\n// })\n//   .then((res) => res.json())\n//   .then((res) => (speechResponse = res))\n// console.log(speechResponse)\n//\n// const speech = speechResponse.results[0].alternatives[0].transcript\n// const encodedSpeech = encodeURIComponent(speech)\n// const uri = 'https://api.wit.ai/message?v=20200513&q=' + encodedSpeech\n// const auth = 'Bearer ' + process.env.GATSBY_WIT_TOKEN\n// fetch(uri, { headers: { Authorization: auth } })\n//   .then((res) => res.json())\n//   .then((res) => console.log(res))\n\n// const uri = 'https://api.wit.ai/speech'\n// const auth = 'Bearer ' + process.env.GATSBY_WIT_TOKEN\n// fetch(uri, {\n//   method: 'POST',\n//   headers: { Authorization: auth, 'Content-type': 'audio/wav' },\n//   body: formattedBase64Data\n// })\n//   .then((res) => res.json())\n//   .then((res) => console.log(res))\n\n// const res = fetch('https://api.wit.ai/speech?client=chromium&lang=en-us&output=json', {\n//   method: 'GET',\n//   headers: {\n//     Accept: 'application/vnd.wit.20160202+json',\n//     Authorization: `Bearer ${process.env.GATSBY_WIT_TOKEN}`,\n//     'Content-Type': 'audio/wav'\n//   }\n// })"],"sourceRoot":""}